{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Best Next Action Project Overview\n",
    "\n",
    "Banks make a margin on every credit card transaction that is made by their customers. So they want their customers to spend more on their credit cards. In order to increase credit card spending, the bank sends marketing messages to their customers to encourage those customers to use their credit cards more. These messages may be sent via email, mail or SMS. The messages may be retail discount offers, holiday destinations or gift ideas.\n",
    "\n",
    "But with a large pool of customers and range of communication channels and messages, how does the bank know who to target with which channel and which message? Traditionally, marketers apply customer segmentation across the entire customer database. However, every customer is unique. Some organizations send the same messages to all customers or to all customers in a segment, but this might be seen as annoying SPAM and push customers away.\n",
    "\n",
    "The solution is to develop a targeted Next Best Action for each individual customer, which is which channel and message to send next to each individual. Sometimes the next best action is to send nothing.\n",
    "\n",
    "\n",
    "## Classification Problems In DataRobot\n",
    "\n",
    "The problem described above is a classification problem.  In DataRobot, we characterize classifications problem in 1 of 3 ways. \n",
    "\n",
    "1.  Binary Classification: 2 classes\n",
    "2.  Multiclass: 3-10 classes\n",
    "3.  Extended Multiclass: 11 to 100 classes.  \n",
    "\n",
    "## Installing the `datarobot` package\n",
    "The `datarobot` package is hosted on PyPI. You can install it via:\n",
    "```\n",
    "pip install datarobot\n",
    "```\n",
    "from the command line. Its main dependencies are `numpy` and `pandas`, which could take some time to install on a new system. We highly recommend use of virtualenvs to avoid conflicts with other dependencies in your system-wide python installation."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Load Required Packages\n",
    "Here, we import the required packages for this project. By convention, we always import `datarobot` with the alias `dr`."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [],
   "source": [
    "import datetime\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from matplotlib import colors\n",
    "from scipy import interp\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as mtick\n",
    "import datarobot as dr"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Configure the Python Client\n",
    "Configuring the client requires the following two things:\n",
    "\n",
    "- A DataRobot endpoint - where the API server can be found\n",
    "- A DataRobot API token - a token the server uses to identify and validate the user making API requests\n",
    "\n",
    "The endpoint is usually the URL you would use to log into the DataRobot Web User Interface (e.g., https://app.datarobot.com) with \"/api/v2/\" appended, e.g., (https://app.datarobot.com/api/v2/).\n",
    "\n",
    "You can find your API token by logging into the DataRobot Web User Interface and looking under `API Key Management`.\n",
    "\n",
    "The Python client can be configured in several ways. The example we'll use in this notebook is to point to a `yaml` file that has the information. This is a text file containing two lines like this:\n",
    "```yaml\n",
    "endpoint: https://app.datarobot.com/api/v2/\n",
    "token: not-my-real-token\n",
    "```\n",
    "Or, for unix based systems, create a file at `~/.config/datarobot/drconfig.yaml` containing two lines like this:\n",
    "```\n",
    "token: yourtoken\n",
    "endpoint: https://app.datarobot.com/api/v2\n",
    "```\n",
    "\n",
    "If you want to run this notebook without changes, please save your file at `~/.config/datarobot/drconfig.yaml`"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "data": {
      "text/plain": "<datarobot.rest.RESTClientObject at 0x1207ff090>"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 2
    }
   ],
   "source": [
    "# Connect to DataRobot\n",
    "\n",
    "# Initialization with arguments\n",
    "# dr.Client(token='<API TOKEN>', endpoint='https://<YOUR ENDPOINT>/api/v2/')\n",
    "\n",
    "# Initialization with a config file in the same directory as this notebook\n",
    "# dr.Client(config_path='drconfig.yaml')\n",
    "\n",
    "# Initialization with a config file located at\n",
    "# ~/.config/datarobot/dr.config.yaml\n",
    "dr.Client()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% \n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Look at the Data Dictionary, Read in the Data, and Perform Exploratory Data Analysis\n",
    "\n",
    "Note: please ensure you have the optional dependant package `xlrd` installed\n",
    "\n",
    "Data Dictionary:"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "outputs": [
    {
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-911fa156e8f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_excel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"DR_Demo_Next_Best_Action_Data_Dictionary.xlsx\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Feature\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Fields in the data set\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\":\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Description\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
     ],
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error"
    }
   ],
   "source": [
    "data_dict = pd.read_excel(\"DR_Demo_Next_Best_Action_Data_Dictionary.xlsx\")\n",
    "data_dict.set_index(\"Feature\", inplace=True)\n",
    "print(\"Fields in the data set\")\n",
    "for idx in data_dict.index:\n",
    "    print(idx,\":\", data_dict.loc[idx][\"Description\"])"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Read in the data and get some basic info"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "outputs": [
    {
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-e48e6cd32b5f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"DR_Demo_Next_Best_Action.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pd' is not defined"
     ],
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error"
    }
   ],
   "source": [
    "df = pd.read_csv(\"DR_Demo_Next_Best_Action.csv\")\n",
    "\n",
    "df.head()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "And we get some descriptive statistics."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [
    {
     "data": {
      "text/plain": "                age         income      aveSpend  nTouchpoints\ncount  20000.000000   20000.000000  20000.000000  20000.000000\nmean      39.203100   71504.298145    730.573514      2.276000\nstd        9.276807   36607.960695   2221.160837      2.299497\nmin       20.000000   10000.000000      0.000000      0.000000\n25%       32.000000   45000.000000     20.830000      0.750000\n50%       38.000000   64000.000000     93.250000      1.000000\n75%       46.000000   89813.000000    427.500000      4.000000\nmax       60.000000  249000.000000  18156.700000      8.000000",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>income</th>\n      <th>aveSpend</th>\n      <th>nTouchpoints</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n      <td>20000.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>39.203100</td>\n      <td>71504.298145</td>\n      <td>730.573514</td>\n      <td>2.276000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>9.276807</td>\n      <td>36607.960695</td>\n      <td>2221.160837</td>\n      <td>2.299497</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>20.000000</td>\n      <td>10000.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>32.000000</td>\n      <td>45000.000000</td>\n      <td>20.830000</td>\n      <td>0.750000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>38.000000</td>\n      <td>64000.000000</td>\n      <td>93.250000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>46.000000</td>\n      <td>89813.000000</td>\n      <td>427.500000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>60.000000</td>\n      <td>249000.000000</td>\n      <td>18156.700000</td>\n      <td>8.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 5
    }
   ],
   "source": [
    "df.describe()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Create a frequency plot of the target variable and print the frequencies for reference"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "data": {
      "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x1207af450>"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 6
    },
    {
     "data": {
      "text/plain": "<Figure size 864x576 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1,figsize=[12,8])\n",
    "freq= pd.crosstab(index = df[\"action\"],columns = \"count\")\n",
    "(freq / freq.sum()).plot(kind = \"bar\", legend = False, ax=ax)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [
    {
     "name": "stdout",
     "text": [
      "col_0              count\naction                  \nemail destination   2432\nemail discount      3820\nemail gift          2163\nmail destination     332\nmail discount        362\nmail gift            551\nno action           3100\nsms destination     1175\nsms discount        2014\nsms gift            4051\n"
     ],
     "output_type": "stream"
    }
   ],
   "source": [
    "print(freq)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## What kind of classification?\n",
    "\n",
    "This is a multiclass problem as there are 10 unique classes.  In DataRobot there are two ways in which we can handle this problem.  \n",
    "\n",
    "1.  Multiclass Classification\n",
    "2.  One Vs. All Classification"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Create the Multiclass Project\n",
    "\n",
    "Here, we create a DataRobot project for option 1 above. For simplicity, we'll run in manual mode and choose a single xgboost model trained on 64% of the data.\n",
    "\n",
    "Note: it may take a while to create the project and return the project id."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "outputs": [
    {
     "name": "stdout",
     "text": [
      "Project ID: 5dfc109712de0b1b7851e9e9\n"
     ],
     "output_type": "stream"
    }
   ],
   "source": [
    "now = datetime.datetime.now().strftime('%Y-%m-%dT%H:%M')\n",
    "project_name = 'Next_Best_Action-Multiclass{}'.format(now)\n",
    "\n",
    "mcp = dr.Project.create(df, project_name = project_name)\n",
    "print('Project ID: {}'.format(mcp.id))"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now, we'll set the target variable and start modeling in manual mode. In this mode, DataRobot will analyze the data set, compute ACE scores, and create data partitions for training, but will not select any blueprints to run.\n",
    "\n",
    "As with the previous step, this will take a little while to complete."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "data": {
      "text/plain": "Project(Next_Best_Action-Multiclass2019-12-19T19:06)"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 9
    }
   ],
   "source": [
    "mcp.set_target(target = \"action\", mode = \"manual\")"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now, we'll check the status of the project. Here we can see if autopilot has completed and what stage the project is in."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "data": {
      "text/plain": "{'autopilot_done': False,\n 'stage_description': 'Ready for modeling',\n 'stage': 'modeling'}"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 10
    }
   ],
   "source": [
    "mcp.get_status()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Here, we manually choose to run a single xgboost model to train on 64% of the data. Again, this will take some time to complete training the model since we'll be using 64% of the data."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [
    {
     "data": {
      "text/plain": "'5'"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 11
    }
   ],
   "source": [
    "blueprints = mcp.get_blueprints()\n",
    "model = list(filter(lambda x: \"eXtreme\" in str(x), blueprints)).pop(0)\n",
    "mcp.train(model, sample_pct = 64)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "This gets the currently in-progress and queued jobs so we can check on the status of our single model being built. We need to wait for this model to finish before moving on to the next step."
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%% md\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [
    {
     "data": {
      "text/plain": "[ModelJob(eXtreme Gradient Boosted Trees Classifier with Early Stopping, status=inprogress)]"
     },
     "metadata": {},
     "output_type": "execute_result",
     "execution_count": 14
    }
   ],
   "source": [
    "mcp.get_model_jobs()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "outputs": [
    {
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-25-4dacfea91615>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmcp_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmcp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_models\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ],
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error"
    }
   ],
   "source": [
    "mcp_model = mcp.get_models()[0]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## One Vs All"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "classes = df[\"action\"].unique()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "def one_vs_all_mf(multiclass_column_name, data):\n",
    "    ## create a project per class for a one vs all type problem\n",
    "    ## train an xgboost per project\n",
    "    project_list = []\n",
    "    classes = data[multiclass_column_name].unique()\n",
    "    for c in classes:\n",
    "        df[\"target\"] = df[multiclass_column_name].apply(lambda x: x == c)\n",
    "        p = dr.Project.create(df.drop([multiclass_column_name],axis=1), project_name = c)\n",
    "        p.set_target(\"target\", mode=\"manual\")\n",
    "        blueprints = p.get_blueprints()\n",
    "        model = list(filter(lambda x: \"eXtreme\" in str(x), blueprints)).pop(0)\n",
    "        p.train(model, sample_pct=64)\n",
    "        project_list.append(p)\n",
    "    return project_list"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "outputs": [
    {
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-24-2cd96f3bf921>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprojects\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mone_vs_all_mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"action\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'one_vs_all_mf' is not defined"
     ],
     "ename": "NameError",
     "evalue": "name 'one_vs_all_mf' is not defined",
     "output_type": "error"
    }
   ],
   "source": [
    "projects = one_vs_all_mf(\"action\", df)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n",
     "is_executing": false
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "# df[\"partition\"] # i would set this\n",
    "\n",
    "# dr.AdvancedOptions()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "projects"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "models = [p.get_models()[0] for p in projects]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "# A one vs all ROC and AUC"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "roc_curves = {}\n",
    "for m in models:\n",
    "    roc_points = m.get_all_roc_curves()[0].roc_points\n",
    "    points = [(x[\"false_positive_rate\"],x[\"true_positive_rate\"]) for x in roc_points]\n",
    "    fpr, tpr = zip(*points)\n",
    "    roc_curves[\"{} - AUC: {:.3}\".format(str(m.project), m.metrics[\"AUC\"][\"validation\"])] = {\"tpr\":tpr, \"fpr\":fpr}\n"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "## average out the roc curves\n",
    "## taken from https://scikit-learn.org/stable/auto_examples/model_selection/plot_roc.html\n",
    "\n",
    "n_classes = len(classes)\n",
    "\n",
    "all_fpr = np.unique(np.concatenate([y[\"fpr\"] for x,y in roc_curves.items()]))\n",
    "\n",
    "# Then interpolate all ROC curves at this points\n",
    "mean_tpr = np.zeros_like(all_fpr)\n",
    "\n",
    "for x,y in roc_curves.items():\n",
    "    mean_tpr += interp(all_fpr, y[\"fpr\"], y[\"tpr\"]) \n",
    "\n",
    "# Finally average it and compute AUC\n",
    "mean_tpr /= n_classes # freq.sum().values[0] #n_classes\n",
    "\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "fpr_macro = all_fpr\n",
    "tpr_macro = mean_tpr\n",
    "auc_macro = auc(fpr_macro, tpr_macro)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "np.random.seed(138)\n",
    "plt.figure(figsize=[12,8])\n",
    "lw=2\n",
    "for x,y in roc_curves.items():\n",
    "    plt.plot(y[\"fpr\"],y[\"tpr\"], c = np.random.rand(3,), lw=lw, label = str(x))\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.plot(fpr_macro, tpr_macro, color=\"red\", lw=3, linestyle=\"--\",label = \"average {:.3}\".format(auc_macro))\n",
    "plt.legend(loc=\"lower right\");"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "[m.request_feature_impact() for m in models]\n",
    "## make a table of normalized feature impacts \n",
    "## columns will be features rows will be project.  \n",
    "#mcp_fi = pd.DataFrame(mcp_model.get_or_request_feature_impact()).set_index(\"featureName\")[\"impactNormalized\"]\n",
    "projects_fi = [pd.DataFrame(m.get_feature_impact()).set_index(\"featureName\")[\"impactNormalized\"] for m in models]\n",
    "#projects_fi.append(mcp_fi)\n",
    "fi_columns = [str(m.project) for m in models]\n",
    "#fi_columns.append(\"mcp\")\n",
    "fi = pd.concat([p.T for p in projects_fi],sort=True,axis=1)\n",
    "fi.columns = fi_columns\n",
    "fi.T"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "fi_sorted = np.argsort(fi.T, axis=1)\n",
    "for c in fi_sorted.columns:\n",
    "    fi_sorted[c] = fi_sorted[c].apply(lambda x: fi_sorted.columns[x])    \n",
    "fi_sorted.columns = [ \"feature {}\".format(i) for i in np.arange(fi_sorted.shape[1])]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "fi_sorted"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Feature Impact for the Multiclass XGBoost"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "mcp_fi = pd.DataFrame(mcp_model.get_or_request_feature_impact())\n",
    "\n",
    "# Formats the ticks from a float into a percent\n",
    "percent_tick_fmt = mtick.PercentFormatter(xmax=1.0)\n",
    "\n",
    "dr_dark_blue = '#08233F'\n",
    "dr_blue = '#1F77B4'\n",
    "dr_orange = '#FF7F0E'\n",
    "dr_red = '#BE3C28'\n",
    "\n",
    "mcp_fi.sort_values(by='impactNormalized', ascending=True, inplace=True)\n",
    "\n",
    "# Positive values are blue, negative are red\n",
    "bar_colors = mcp_fi.impactNormalized.apply(lambda x: dr_red if x < 0\n",
    "                                              else dr_blue)\n",
    "\n",
    "ax = mcp_fi.plot.barh(x='featureName', y='impactNormalized',\n",
    "                         legend=False,\n",
    "                         color=bar_colors,\n",
    "                         figsize=(12, 8))\n",
    "\n",
    "plt.ylabel('')\n",
    "plt.xlabel('Effect')\n",
    "# plt.xlim((None, 1))  # Allow for negative impact\n",
    "plt.title('Feature Impact', y=1.04)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1,1,figsize = [12,8])\n",
    "fi.T[mcp_fi[\"featureName\"].values].boxplot(ax=ax, vert=False)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Converting One vs All Probs to multiclass probs.  \n",
    "\n",
    "If you already have probabilities, you can simply do `probs/probs.sum(axis=1, keepdims=True)`, which will normalize the probabilities for each row such that they sum to one.  \n",
    "\n",
    "A clever way to make class assignments for multiclass problems.  https://stats.stackexchange.com/questions/208915/one-vs-many-one-vs-all-what-value-to-use-as-probability"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "datasets = [p.upload_dataset(df) for p in projects]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "preds_request = [(str(m.project), m.request_predictions(d.id)) for m, d in zip(models, datasets)]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "pred_results = [p.get_result_when_complete() for p in preds_request]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "preds_results_df = pd.DataFrame([p[\"positive_probability\"] for p in pred_results]).T\n",
    "preds_results_df.columns = [str(p) for p in projects]"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "norm_preds_results_df = preds_results_df / preds_results_df.values.sum(axis=1, keepdims=True)"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "norm_preds_results_df.head()"
   ],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [],
   "metadata": {
    "collapsed": false,
    "pycharm": {
     "name": "#%%\n"
    }
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "source": [],
    "metadata": {
     "collapsed": false
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
